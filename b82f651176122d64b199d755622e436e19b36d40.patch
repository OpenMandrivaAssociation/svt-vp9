From b82f651176122d64b199d755622e436e19b36d40 Mon Sep 17 00:00:00 2001
From: dronimal-ya <95363753+dronimal-ya@users.noreply.github.com>
Date: Sat, 4 Dec 2021 05:35:10 +0300
Subject: [PATCH] Fix libvpx symbol conflicts (#151)

Signed-off-by: Andrei Bich <dronimal@yandex-team.ru>
---
 Source/Lib/ASM_AVX2/EbFdct_Intrinsic_AVX2.c |  2 +-
 Source/Lib/ASM_AVX2/EbIdct_Intrinsic_AVX2.c |  2 +-
 Source/Lib/ASM_SSE2/vp9_dct_intrin_sse2.c   |  2 +-
 Source/Lib/VPX/vp9_dct.c                    |  2 +-
 Source/Lib/VPX/vp9_idct.c                   |  4 +--
 Source/Lib/VPX/vp9_rtcd.h                   | 10 +++----
 Source/Lib/VPX/vpx_dsp_rtcd.h               | 30 ++++++++++-----------
 7 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/Source/Lib/ASM_AVX2/EbFdct_Intrinsic_AVX2.c b/Source/Lib/ASM_AVX2/EbFdct_Intrinsic_AVX2.c
index a6ccefa..b297de4 100644
--- a/Source/Lib/ASM_AVX2/EbFdct_Intrinsic_AVX2.c
+++ b/Source/Lib/ASM_AVX2/EbFdct_Intrinsic_AVX2.c
@@ -478,7 +478,7 @@ static INLINE void right_shift_write_buffer_8x8(const __m256i *const in,
     store_output(out[7], (output + 7 * 8));
 }
 
-void vpx_fdct8x8_avx2(const int16_t *input, tran_low_t *output, int stride) {
+void eb_vp9_fdct8x8_avx2(const int16_t *input, tran_low_t *output, int stride) {
     int overflow;
     __m256i in[4];
 
diff --git a/Source/Lib/ASM_AVX2/EbIdct_Intrinsic_AVX2.c b/Source/Lib/ASM_AVX2/EbIdct_Intrinsic_AVX2.c
index 438aa83..a42189a 100644
--- a/Source/Lib/ASM_AVX2/EbIdct_Intrinsic_AVX2.c
+++ b/Source/Lib/ASM_AVX2/EbIdct_Intrinsic_AVX2.c
@@ -1049,7 +1049,7 @@ static void idct32_1024_16x32_avx2(
     add_sub_butterfly_avx2(temp, out, 32);
 }
 
-void vpx_idct32x32_1024_add_avx2(
+void eb_vp9_idct32x32_1024_add_avx2(
     const tran_low_t *input,
     uint8_t          *dest,
     int               stride)
diff --git a/Source/Lib/ASM_SSE2/vp9_dct_intrin_sse2.c b/Source/Lib/ASM_SSE2/vp9_dct_intrin_sse2.c
index 462170b..acd1347 100644
--- a/Source/Lib/ASM_SSE2/vp9_dct_intrin_sse2.c
+++ b/Source/Lib/ASM_SSE2/vp9_dct_intrin_sse2.c
@@ -443,7 +443,7 @@ void eb_vp9_fht4x4_sse2(const int16_t *input, tran_low_t *output, int stride,
     }
 }
 
-void vp9_fdct8x8_quant_sse2(const int16_t *input, int stride,
+void eb_vp9_fdct8x8_quant_sse2(const int16_t *input, int stride,
     int16_t *coeff_ptr, intptr_t n_coeffs,
     int skip_block, const int16_t *round_ptr,
     const int16_t *quant_ptr, int16_t *qcoeff_ptr,
diff --git a/Source/Lib/VPX/vp9_dct.c b/Source/Lib/VPX/vp9_dct.c
index 96e97d8..e3c3b5a 100644
--- a/Source/Lib/VPX/vp9_dct.c
+++ b/Source/Lib/VPX/vp9_dct.c
@@ -549,7 +549,7 @@ void eb_vp9_fht4x4_c(const int16_t *input, tran_low_t *output, int stride,
   }
 }
 
-void vp9_fdct8x8_quant_c(const int16_t *input, int stride,
+void eb_vp9_fdct8x8_quant_c(const int16_t *input, int stride,
                          tran_low_t *coeff_ptr, intptr_t n_coeffs,
                          int skip_block, const int16_t *round_ptr,
                          const int16_t *quant_ptr, tran_low_t *qcoeff_ptr,
diff --git a/Source/Lib/VPX/vp9_idct.c b/Source/Lib/VPX/vp9_idct.c
index a7267ca..5e49c68 100644
--- a/Source/Lib/VPX/vp9_idct.c
+++ b/Source/Lib/VPX/vp9_idct.c
@@ -143,7 +143,7 @@ void eb_vp9_idct8x8_add(const tran_low_t *input, uint8_t *dest, int stride,
   else if (eob <= 12)
     eb_vp9_idct8x8_12_add(input, dest, stride);
   else
-    vpx_idct8x8_64_add(input, dest, stride);
+    eb_vp9_idct8x8_64_add(input, dest, stride);
 }
 
 void eb_vp9_idct16x16_add(const tran_low_t *input, uint8_t *dest, int stride,
@@ -171,7 +171,7 @@ void eb_vp9_idct32x32_add(const tran_low_t *input, uint8_t *dest, int stride,
     // non-zero coeff only in upper-left 16x16
     eb_vp9_idct32x32_135_add(input, dest, stride);
   else
-    vpx_idct32x32_1024_add(input, dest, stride);
+    eb_vp9_idct32x32_1024_add(input, dest, stride);
 }
 
 // iht
diff --git a/Source/Lib/VPX/vp9_rtcd.h b/Source/Lib/VPX/vp9_rtcd.h
index eca0a14..973a3cb 100644
--- a/Source/Lib/VPX/vp9_rtcd.h
+++ b/Source/Lib/VPX/vp9_rtcd.h
@@ -45,9 +45,9 @@ extern "C" {
     int eb_vp9_diamond_search_sad_avx(const struct macroblock *x, const struct search_site_config *cfg, struct mv *ref_mv, struct mv *best_mv, int search_param, int sad_per_bit, int *num00, const struct vp9_variance_vtable *fn_ptr, const struct mv *center_mv);
     RTCD_EXTERN int(*eb_vp9_diamond_search_sad)(const struct macroblock *x, const struct search_site_config *cfg, struct mv *ref_mv, struct mv *best_mv, int search_param, int sad_per_bit, int *num00, const struct vp9_variance_vtable *fn_ptr, const struct mv *center_mv);
 
-    void vp9_fdct8x8_quant_c(const int16_t *input, int stride, tran_low_t *coeff_ptr, intptr_t n_coeffs, int skip_block, const int16_t *round_ptr, const int16_t *quant_ptr, tran_low_t *qcoeff_ptr, tran_low_t *dqcoeff_ptr, const int16_t *dequant_ptr, uint16_t *eob_ptr, const int16_t *scan, const int16_t *iscan);
-    void vp9_fdct8x8_quant_ssse3(const int16_t *input, int stride, tran_low_t *coeff_ptr, intptr_t n_coeffs, int skip_block, const int16_t *round_ptr, const int16_t *quant_ptr, tran_low_t *qcoeff_ptr, tran_low_t *dqcoeff_ptr, const int16_t *dequant_ptr, uint16_t *eob_ptr, const int16_t *scan, const int16_t *iscan);
-    RTCD_EXTERN void(*vp9_fdct8x8_quant)(const int16_t *input, int stride, tran_low_t *coeff_ptr, intptr_t n_coeffs, int skip_block, const int16_t *round_ptr, const int16_t *quant_ptr, tran_low_t *qcoeff_ptr, tran_low_t *dqcoeff_ptr, const int16_t *dequant_ptr, uint16_t *eob_ptr, const int16_t *scan, const int16_t *iscan);
+    void eb_vp9_fdct8x8_quant_c(const int16_t *input, int stride, tran_low_t *coeff_ptr, intptr_t n_coeffs, int skip_block, const int16_t *round_ptr, const int16_t *quant_ptr, tran_low_t *qcoeff_ptr, tran_low_t *dqcoeff_ptr, const int16_t *dequant_ptr, uint16_t *eob_ptr, const int16_t *scan, const int16_t *iscan);
+    void eb_vp9_fdct8x8_quant_ssse3(const int16_t *input, int stride, tran_low_t *coeff_ptr, intptr_t n_coeffs, int skip_block, const int16_t *round_ptr, const int16_t *quant_ptr, tran_low_t *qcoeff_ptr, tran_low_t *dqcoeff_ptr, const int16_t *dequant_ptr, uint16_t *eob_ptr, const int16_t *scan, const int16_t *iscan);
+    RTCD_EXTERN void(*eb_vp9_fdct8x8_quant)(const int16_t *input, int stride, tran_low_t *coeff_ptr, intptr_t n_coeffs, int skip_block, const int16_t *round_ptr, const int16_t *quant_ptr, tran_low_t *qcoeff_ptr, tran_low_t *dqcoeff_ptr, const int16_t *dequant_ptr, uint16_t *eob_ptr, const int16_t *scan, const int16_t *iscan);
 
     void eb_vp9_fht16x16_c(const int16_t *input, tran_low_t *output, int stride, int tx_type);
     void vp9_fht16x16_avx2(const int16_t *input, tran_low_t *output, int stride, int tx_type);
@@ -130,8 +130,8 @@ extern "C" {
         if (flags & HAS_AVX2) eb_vp9_block_error_fp = eb_vp9_block_error_fp_avx2;
         eb_vp9_diamond_search_sad = eb_vp9_diamond_search_sad_c;
         if (flags & HAS_AVX) eb_vp9_diamond_search_sad = eb_vp9_diamond_search_sad_avx;
-        vp9_fdct8x8_quant = vp9_fdct8x8_quant_c;
-        if (flags & HAS_SSSE3) vp9_fdct8x8_quant = vp9_fdct8x8_quant_ssse3;
+        eb_vp9_fdct8x8_quant = eb_vp9_fdct8x8_quant_c;
+        if (flags & HAS_SSSE3) eb_vp9_fdct8x8_quant = eb_vp9_fdct8x8_quant_ssse3;
 #endif
         vp9_fht16x16 = eb_vp9_fht16x16_c;
         if (flags & HAS_AVX2) vp9_fht16x16 = vp9_fht16x16_avx2;
diff --git a/Source/Lib/VPX/vpx_dsp_rtcd.h b/Source/Lib/VPX/vpx_dsp_rtcd.h
index 94a691c..a0e7098 100644
--- a/Source/Lib/VPX/vpx_dsp_rtcd.h
+++ b/Source/Lib/VPX/vpx_dsp_rtcd.h
@@ -299,13 +299,13 @@ void vpx_fdct4x4_1_sse2(const int16_t *input, tran_low_t *output, int stride);
 RTCD_EXTERN void(*vpx_fdct4x4_1)(const int16_t *input, tran_low_t *output, int stride);
 #endif
 void eb_vp9_fdct8x8_c(const int16_t *input, tran_low_t *output, int stride);
-void vpx_fdct8x8_avx2(const int16_t *input, tran_low_t *output, int stride);
-RTCD_EXTERN void(*vpx_fdct8x8)(const int16_t *input, tran_low_t *output, int stride);
+void eb_vp9_fdct8x8_avx2(const int16_t *input, tran_low_t *output, int stride);
+RTCD_EXTERN void(*eb_vp9_fdct8x8)(const int16_t *input, tran_low_t *output, int stride);
 
 #if 0
 void eb_vp9_fdct8x8_1_c(const int16_t *input, tran_low_t *output, int stride);
-void vpx_fdct8x8_1_sse2(const int16_t *input, tran_low_t *output, int stride);
-RTCD_EXTERN void(*vpx_fdct8x8_1)(const int16_t *input, tran_low_t *output, int stride);
+void eb_vp9_fdct8x8_1_sse2(const int16_t *input, tran_low_t *output, int stride);
+RTCD_EXTERN void(*eb_vp9_fdct8x8_1)(const int16_t *input, tran_low_t *output, int stride);
 
 void vpx_get16x16var_c(const uint8_t *src_ptr, int source_stride, const uint8_t *ref_ptr, int ref_stride, unsigned int *sse, int *sum);
 void vpx_get16x16var_avx2(const uint8_t *src_ptr, int source_stride, const uint8_t *ref_ptr, int ref_stride, unsigned int *sse, int *sum);
@@ -373,8 +373,8 @@ void eb_vp9_idct16x16_38_add_sse2(const tran_low_t *input, uint8_t *dest, int st
 RTCD_EXTERN void(*vpx_idct16x16_38_add)(const tran_low_t *input, uint8_t *dest, int stride);
 
 void eb_vp9_idct32x32_1024_add_c(const tran_low_t *input, uint8_t *dest, int stride);
-void vpx_idct32x32_1024_add_avx2(const tran_low_t *input, uint8_t *dest, int stride);
-RTCD_EXTERN void(*vpx_idct32x32_1024_add)(const tran_low_t *input, uint8_t *dest, int stride);
+void eb_vp9_idct32x32_1024_add_avx2(const tran_low_t *input, uint8_t *dest, int stride);
+RTCD_EXTERN void(*eb_vp9_idct32x32_1024_add)(const tran_low_t *input, uint8_t *dest, int stride);
 
 void eb_vp9_idct32x32_135_add_c(const tran_low_t *input, uint8_t *dest, int stride);
 void eb_vp9_idct32x32_135_add_avx2(const tran_low_t *input, uint8_t *dest, int stride);
@@ -406,7 +406,7 @@ RTCD_EXTERN void(*vpx_idct8x8_1_add)(const tran_low_t *input, uint8_t *dest, int
 
 void eb_vp9_idct8x8_64_add_c(const tran_low_t *input, uint8_t *dest, int stride);
 void eb_vp9_idct8x8_64_add_sse2(const tran_low_t *input, uint8_t *dest, int stride);
-RTCD_EXTERN void(*vpx_idct8x8_64_add)(const tran_low_t *input, uint8_t *dest, int stride);
+RTCD_EXTERN void(*eb_vp9_idct8x8_64_add)(const tran_low_t *input, uint8_t *dest, int stride);
 
 int16_t vpx_int_pro_col_c(const uint8_t *ref, const int width);
 int16_t vpx_int_pro_col_sse2(const uint8_t *ref, const int width);
@@ -1101,13 +1101,13 @@ static void setup_rtcd_internal(uint32_t asm_type)
 #endif
     vpx_fdct4x4 = eb_vp9_fdct4x4_c;
     if (flags & HAS_SSE2) vpx_fdct4x4 = eb_vp9_fdct4x4_sse2;
-    vpx_fdct8x8 = eb_vp9_fdct8x8_c;
-    if (flags & HAS_AVX2) vpx_fdct8x8 = vpx_fdct8x8_avx2;
+    eb_vp9_fdct8x8 = eb_vp9_fdct8x8_c;
+    if (flags & HAS_AVX2) eb_vp9_fdct8x8 = eb_vp9_fdct8x8_avx2;
 #if 0
     vpx_fdct4x4_1 = eb_vp9_fdct4x4_1_c;
     if (flags & HAS_SSE2) vpx_fdct4x4_1 = vpx_fdct4x4_1_sse2;
-    vpx_fdct8x8_1 = eb_vp9_fdct8x8_1_c;
-    if (flags & HAS_SSE2) vpx_fdct8x8_1 = vpx_fdct8x8_1_sse2;
+    eb_vp9_fdct8x8_1 = eb_vp9_fdct8x8_1_c;
+    if (flags & HAS_SSE2) eb_vp9_fdct8x8_1 = eb_vp9_fdct8x8_1_sse2;
     vpx_get16x16var = vpx_get16x16var_c;
     if (flags & HAS_AVX2) vpx_get16x16var = vpx_get16x16var_avx2;
     vpx_get4x4sse_cs = vpx_get4x4sse_cs_c;
@@ -1141,8 +1141,8 @@ static void setup_rtcd_internal(uint32_t asm_type)
     if (flags & HAS_SSE2) vpx_idct16x16_256_add = eb_vp9_idct16x16_256_add_sse2;
     vpx_idct16x16_38_add = eb_vp9_idct16x16_38_add_c;
     if (flags & HAS_SSE2) vpx_idct16x16_38_add = eb_vp9_idct16x16_38_add_sse2;
-    vpx_idct32x32_1024_add = eb_vp9_idct32x32_1024_add_c;
-    if (flags & HAS_AVX2) vpx_idct32x32_1024_add = vpx_idct32x32_1024_add_avx2;
+    eb_vp9_idct32x32_1024_add = eb_vp9_idct32x32_1024_add_c;
+    if (flags & HAS_AVX2) eb_vp9_idct32x32_1024_add = eb_vp9_idct32x32_1024_add_avx2;
     eb_vp9_idct32x32_135_add = eb_vp9_idct32x32_135_add_c;
     if (flags & HAS_AVX2) eb_vp9_idct32x32_135_add = eb_vp9_idct32x32_135_add_avx2;
     vpx_idct32x32_1_add = eb_vp9_idct32x32_1_add_c;
@@ -1157,8 +1157,8 @@ static void setup_rtcd_internal(uint32_t asm_type)
     if (flags & HAS_SSSE3) eb_vp9_idct8x8_12_add = eb_vp9_idct8x8_12_add_ssse3;
     vpx_idct8x8_1_add = eb_vp9_idct8x8_1_add_c;
     if (flags & HAS_SSE2) vpx_idct8x8_1_add = eb_vp9_idct8x8_1_add_sse2;
-    vpx_idct8x8_64_add = eb_vp9_idct8x8_64_add_c;
-    if (flags & HAS_SSE2) vpx_idct8x8_64_add = eb_vp9_idct8x8_64_add_sse2;
+    eb_vp9_idct8x8_64_add = eb_vp9_idct8x8_64_add_c;
+    if (flags & HAS_SSE2) eb_vp9_idct8x8_64_add = eb_vp9_idct8x8_64_add_sse2;
     eb_vp9_lpf_horizontal_16 = eb_vp9_lpf_horizontal_16_c;
     if (flags & HAS_AVX2) eb_vp9_lpf_horizontal_16 = eb_vp9_lpf_horizontal_16_avx2;
     eb_vp9_lpf_horizontal_16_dual = eb_vp9_lpf_horizontal_16_dual_c;
